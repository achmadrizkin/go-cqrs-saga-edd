// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: order_query.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderQueryServiceClient is the client API for OrderQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderQueryServiceClient interface {
	GetOrderProductAll(ctx context.Context, in *GetOrderProductRequest, opts ...grpc.CallOption) (*GetAllOrderProductResponse, error)
}

type orderQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderQueryServiceClient(cc grpc.ClientConnInterface) OrderQueryServiceClient {
	return &orderQueryServiceClient{cc}
}

func (c *orderQueryServiceClient) GetOrderProductAll(ctx context.Context, in *GetOrderProductRequest, opts ...grpc.CallOption) (*GetAllOrderProductResponse, error) {
	out := new(GetAllOrderProductResponse)
	err := c.cc.Invoke(ctx, "/OrderQueryService/GetOrderProductAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderQueryServiceServer is the server API for OrderQueryService service.
// All implementations must embed UnimplementedOrderQueryServiceServer
// for forward compatibility
type OrderQueryServiceServer interface {
	GetOrderProductAll(context.Context, *GetOrderProductRequest) (*GetAllOrderProductResponse, error)
	mustEmbedUnimplementedOrderQueryServiceServer()
}

// UnimplementedOrderQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderQueryServiceServer struct {
}

func (UnimplementedOrderQueryServiceServer) GetOrderProductAll(context.Context, *GetOrderProductRequest) (*GetAllOrderProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderProductAll not implemented")
}
func (UnimplementedOrderQueryServiceServer) mustEmbedUnimplementedOrderQueryServiceServer() {}

// UnsafeOrderQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderQueryServiceServer will
// result in compilation errors.
type UnsafeOrderQueryServiceServer interface {
	mustEmbedUnimplementedOrderQueryServiceServer()
}

func RegisterOrderQueryServiceServer(s grpc.ServiceRegistrar, srv OrderQueryServiceServer) {
	s.RegisterService(&OrderQueryService_ServiceDesc, srv)
}

func _OrderQueryService_GetOrderProductAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueryServiceServer).GetOrderProductAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderQueryService/GetOrderProductAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueryServiceServer).GetOrderProductAll(ctx, req.(*GetOrderProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderQueryService_ServiceDesc is the grpc.ServiceDesc for OrderQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderQueryService",
	HandlerType: (*OrderQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderProductAll",
			Handler:    _OrderQueryService_GetOrderProductAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_query.proto",
}
