// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: order_command.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderCommandServiceClient is the client API for OrderCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderCommandServiceClient interface {
	PostOrderProduct(ctx context.Context, in *PostOrderProductRequest, opts ...grpc.CallOption) (*PostOrderProductResponse, error)
}

type orderCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderCommandServiceClient(cc grpc.ClientConnInterface) OrderCommandServiceClient {
	return &orderCommandServiceClient{cc}
}

func (c *orderCommandServiceClient) PostOrderProduct(ctx context.Context, in *PostOrderProductRequest, opts ...grpc.CallOption) (*PostOrderProductResponse, error) {
	out := new(PostOrderProductResponse)
	err := c.cc.Invoke(ctx, "/OrderCommandService/PostOrderProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderCommandServiceServer is the server API for OrderCommandService service.
// All implementations must embed UnimplementedOrderCommandServiceServer
// for forward compatibility
type OrderCommandServiceServer interface {
	PostOrderProduct(context.Context, *PostOrderProductRequest) (*PostOrderProductResponse, error)
	mustEmbedUnimplementedOrderCommandServiceServer()
}

// UnimplementedOrderCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderCommandServiceServer struct {
}

func (UnimplementedOrderCommandServiceServer) PostOrderProduct(context.Context, *PostOrderProductRequest) (*PostOrderProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostOrderProduct not implemented")
}
func (UnimplementedOrderCommandServiceServer) mustEmbedUnimplementedOrderCommandServiceServer() {}

// UnsafeOrderCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderCommandServiceServer will
// result in compilation errors.
type UnsafeOrderCommandServiceServer interface {
	mustEmbedUnimplementedOrderCommandServiceServer()
}

func RegisterOrderCommandServiceServer(s grpc.ServiceRegistrar, srv OrderCommandServiceServer) {
	s.RegisterService(&OrderCommandService_ServiceDesc, srv)
}

func _OrderCommandService_PostOrderProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostOrderProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCommandServiceServer).PostOrderProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderCommandService/PostOrderProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCommandServiceServer).PostOrderProduct(ctx, req.(*PostOrderProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderCommandService_ServiceDesc is the grpc.ServiceDesc for OrderCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderCommandService",
	HandlerType: (*OrderCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostOrderProduct",
			Handler:    _OrderCommandService_PostOrderProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_command.proto",
}
